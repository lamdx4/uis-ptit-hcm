package lamdx4.uis.ptithcm.ui.theme

import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

/**
 * PTIT Typography Usage Guidelines - MOBILE OPTIMIZED
 *
 * T·ªëi ∆∞u cho m√†n h√¨nh Android nh·ªè, text compact h∆°n web
 * ∆Øu ti√™n ti·∫øt ki·ªám kh√¥ng gian v√† d·ªÖ ƒë·ªçc tr√™n mobile
 */
object PTITTypography {

    /**
     * üè∑Ô∏è SCREEN HEADERS - Ti√™u ƒë·ªÅ m√†n h√¨nh ch√≠nh
     * Usage: TopAppBar titles, screen headers
     * Mobile: Nh·ªè g·ªçn h∆°n, kh√¥ng chi·∫øm qu√° nhi·ªÅu space
     */
    val screenTitle: TextStyle
        @Composable get() = MaterialTheme.typography.titleLarge.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * üìÑ SECTION HEADERS - Ti√™u ƒë·ªÅ ph·∫ßn, nh√≥m n·ªôi dung
     * Usage: Card headers, section dividers
     * Mobile: V·ª´a ƒë·ªß ƒë·ªÉ ph√¢n bi·ªát nh∆∞ng kh√¥ng qu√° l·ªõn
     */
    val sectionTitle: TextStyle
        @Composable get() = MaterialTheme.typography.titleMedium.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * üìù CARD TITLES - Ti√™u ƒë·ªÅ card, item trong list
     * Usage: Semester cards, subject cards, grade items
     * Mobile: Compact size cho list items
     */
    val cardTitle: TextStyle
        @Composable get() = MaterialTheme.typography.titleSmall.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * üìÑ MAIN CONTENT - N·ªôi dung ch√≠nh, th√¥ng tin quan tr·ªçng
     * Usage: Student info, schedule details, descriptions
     * Mobile: Standard body size, d·ªÖ ƒë·ªçc nh∆∞ng kh√¥ng chi·∫øm nhi·ªÅu ch·ªó
     */
    val bodyContent: TextStyle
        @Composable get() = MaterialTheme.typography.bodyMedium

    /**
     * üìù SECONDARY CONTENT - Th√¥ng tin ph·ª•, chi ti·∫øt b·ªï sung
     * Usage: Timestamps, metadata, additional info
     * Mobile: Nh·ªè h∆°n ƒë·ªÉ ti·∫øt ki·ªám space
     */
    val bodySecondary: TextStyle
        @Composable get() = MaterialTheme.typography.bodySmall

    /**
     * üè∑Ô∏è SMALL INFO - Th√¥ng tin nh·ªè, labels
     * Usage: Status badges, small labels, hints
     * Mobile: R·∫•t nh·ªè g·ªçn cho labels
     */
    val caption: TextStyle
        @Composable get() = MaterialTheme.typography.labelSmall

    /**
     * üîò BUTTONS - Text cho buttons, actions
     * Usage: Button text, tab labels, action items
     * Mobile: Standard button size, touch-friendly
     */
    val buttonText: TextStyle
        @Composable get() = MaterialTheme.typography.labelLarge.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * ‚ö†Ô∏è ERROR TEXT - Text b√°o l·ªói
     * Usage: Error messages, validation feedback
     * Mobile: ƒê·ªß r√µ ƒë·ªÉ ƒë·ªçc l·ªói nh∆∞ng kh√¥ng qu√° l·ªõn
     */
    val errorText: TextStyle
        @Composable get() = MaterialTheme.typography.bodySmall.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * ‚úÖ SUCCESS TEXT - Text th√¥ng b√°o th√†nh c√¥ng
     * Usage: Success messages, confirmation text
     * Mobile: T∆∞∆°ng t·ª± error text
     */
    val successText: TextStyle
        @Composable get() = MaterialTheme.typography.bodySmall.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * üî¢ NUMERIC DISPLAY - Hi·ªÉn th·ªã s·ªë li·ªáu quan tr·ªçng
     * Usage: GPA, grades, statistics
     * Mobile: L·ªõn v·ª´a ƒë·ªß ƒë·ªÉ highlight s·ªë li·ªáu quan tr·ªçng
     */
    val numericDisplay: TextStyle
        @Composable get() = MaterialTheme.typography.headlineSmall.copy(
            fontWeight = FontWeight.Bold
        )

    /**
     * üè∑Ô∏è BADGE TEXT - Text trong badges, chips
     * Usage: Status badges, category chips
     * Mobile: R·∫•t compact cho badges nh·ªè
     */
    val badgeText: TextStyle
        @Composable get() = MaterialTheme.typography.labelSmall.copy(
            fontWeight = FontWeight.Medium
        )

    /**
     * üì± LIST ITEM - Text cho items trong list
     * Usage: Subject names, schedule items
     * Mobile: T·ªëi ∆∞u cho danh s√°ch d√†i tr√™n mobile
     */
    val listItem: TextStyle
        @Composable get() = MaterialTheme.typography.bodyMedium.copy(
            fontWeight = FontWeight.Normal
        )

    /**
     * üîç SUBTITLE - Subtitle nh·ªè g·ªçn
     * Usage: Descriptions, subtitles under main content
     * Mobile: Nh·ªè h∆°n body content
     */
    val subtitle: TextStyle
        @Composable get() = MaterialTheme.typography.bodySmall.copy(
            fontWeight = FontWeight.Normal
        )
    val displayLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 57.sp,
        lineHeight = 64.sp,
        letterSpacing = (-0.25).sp
    )
    val displayMedium = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 45.sp,
        lineHeight = 52.sp,
        letterSpacing = 0.sp
    )
    val displaySmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 36.sp,
        lineHeight = 44.sp,
        letterSpacing = 0.sp
    )
    val headlineLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 32.sp,
        lineHeight = 40.sp,
        letterSpacing = 0.sp
    )
    val headlineMedium = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 28.sp,
        lineHeight = 36.sp,
        letterSpacing = 0.sp
    )
    val headlineSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 24.sp,
        lineHeight = 32.sp,
        letterSpacing = 0.sp
    )
    val titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    )
    val titleMedium = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.15.sp
    )
    val titleSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 14.sp,
        lineHeight = 20.sp,
        letterSpacing = 0.1.sp
    )
    val bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    val bodyMedium = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 14.sp,
        lineHeight = 20.sp,
        letterSpacing = 0.25.sp
    )
    val bodySmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 12.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.4.sp
    )
    val labelLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 14.sp,
        lineHeight = 20.sp,
        letterSpacing = 0.1.sp
    )
    val labelMedium = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 12.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    val labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
}