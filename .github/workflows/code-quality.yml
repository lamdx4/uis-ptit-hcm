name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  kotlin-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run Kotlin lint (ktlint)
      run: ./gradlew ktlintCheck --stacktrace
      continue-on-error: true
      
    - name: Upload ktlint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ktlint-reports
        path: app/build/reports/ktlint/

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run dependency check
      run: ./gradlew dependencyCheckAnalyze --stacktrace
      continue-on-error: true

  pr-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR title format
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          perf
          test
          chore
        requireScope: false
        
    - name: Check for large files
      run: |
        if git diff --name-only origin/main...HEAD | xargs ls -la | awk '$5 > 10485760 { print $0 "; Size: " $5/1024/1024 " MB" }' | grep -q .; then
          echo "❌ Large files detected (>10MB):"
          git diff --name-only origin/main...HEAD | xargs ls -la | awk '$5 > 10485760 { print $0 "; Size: " $5/1024/1024 " MB" }'
          exit 1
        else
          echo "✅ No large files detected"
        fi
        
    - name: Check commit messages
      run: |
        git log --oneline origin/main..HEAD | while read line; do
          if ! echo "$line" | grep -qE "^[a-f0-9]{7,} (feat|fix|docs|style|refactor|perf|test|chore)(\(.+\))?: .+"; then
            echo "❌ Invalid commit message format: $line"
            echo "Expected format: type(scope): description"
            exit 1
          fi
        done
        echo "✅ All commit messages follow convention"
